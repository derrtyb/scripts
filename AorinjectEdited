getgenv().keybind = "c"
getgenv().silentkeybind = "z"
getgenv().espToggleKey = "t"
getgenv().prediction = 0.1258
getgenv().ballistics = 0.35
getgenv().smoothness = 11
getgenv().fovradius = 120
getgenv().Notifications = false
getgenv().SmoothnessValue = true
getgenv().PredictionState = true
getgenv().CamUndergroundResolver = true
getgenv().UnlockWhenTargetDies = true
getgenv().UnlockWhenPlayerDies = true
getgenv().TracerRadius = false
getgenv().GrabbedCheck = true
getgenv().KoCheck = true
getgenv().AntiDetect = true
getgenv().AntiDetectNumber = 29
getgenv().CamAntiDetect = false
getgenv().CamlockPriority = false
getgenv().CamShake = false
getgenv().CamShakeNumber = 25
getgenv().Humanize = false
getgenv().HumanizePower = 10
getgenv().loaded = false
getgenv().AorinjectSettings = {
    SilentAim = true,
    Prediction = 0.1389,
}
Drawing = Drawing
mousemoverel = mousemoverel

local Settings = {
    Head = "HumanoidRootPart",
    Humanoid = "Humanoid",
    NeckOffSet = Vector3.new(0, tonumber(getgenv().ballistics), 0)
};

local Locking = false
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Workspace = game:GetService("Workspace")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local Heartbeat = RunService.Heartbeat
local CurrentCamera = Workspace.CurrentCamera
local Drawingnew, Color3fromRGB, Vector2new = Drawing.new
local Color3fromRGB = Color3.fromRGB
local Vector2new = Vector2.new
local GetGuiInset = GuiService.GetGuiInset
local CharacterAdded = LocalPlayer.CharacterAdded
local CharacterAddedWait = CharacterAdded.Wait
local WorldToViewportPoint = CurrentCamera.WorldToViewportPoint
local RaycastParamsnew = RaycastParams.new
local EnumRaycastFilterTypeBlacklist = Enum.RaycastFilterType.Blacklist
local Raycast = Workspace.Raycast
local GetPlayers = Players.GetPlayers
local Instancenew = Instance.new
local IsDescendantOf = Instancenew("Part").IsDescendantOf
local FindFirstChildWhichIsA = Instancenew("Part").FindFirstChildWhichIsA
local FindFirstChild = Instancenew("Part").FindFirstChild
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = game:GetService("Workspace").CurrentCamera
local Enemy
local Render_Lock = nil
local FOV_Circle = Drawing.new("Circle")
FOV_Circle.Filled = false
FOV_Circle.Color = Color3.fromRGB(170, 255, 255)
FOV_Circle.Radius = getgenv().fovradius
FOV_Circle.Thickness = 1
FOV_Circle.Visible = false
FOV_Circle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
local Move_Circle = nil
local accomidationfactor = 0.1
local aorinjectbase = function(a) 
    rconsoleprint("@@WHITE@@") 
    rconsoleprint(a) 
end
local aori, aoricammisc, aorisilmisc = nil, nil, nil
local smoothnessstatus, notifstatus, unlockwhendeadstatus, tracewhentargetradiusstatus, fovcirclestatus, silentfovcirclestatus, camshakestatus  = "true", "false", "true", "false", "false", "false", "false"
local smoothnessvalue, predictionvalue, silpredictionvalue = "11", "Default", "0.1389"
local predictionstatus, undergroundresolverstatus, silgrabbedvalue, silkodcheckstatus, antidetectstatus, camlockprioritystatus, camantidetectstatus, humanizestatus = "true", "true", "true", "true", "true", "false", "false", "false"
local aorinjectstatus = "Not Loaded"
local silpredictionstatus, silentaimstatus = "Enabled", "Enabled"
local silresolverstatus = "Enabled"
local fovvalue = "120"
local silentfovvalue = "40"
local keybindvalue = "c"
local silentkeybindvalue = "z"
local espkeybindvalue = "t"
local antilockdetected = nil
local antidetectvalue = "30"
local camshakevalue = "25"
local humanizevalue = "10"

getgenv().Aorinject = {
    Enabled = true,
    ShowFOV = false,
    FOV = 40,
    FOVSides = 25,
    FOVColour = Color3fromRGB(255, 255, 255),
    VisibleCheck = true,
    HitChance = 100,
    Selected = nil,
    SelectedPart = nil,
    TargetPart = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightUpperLeg"},
}

local circle = Drawingnew("Circle")
circle.Transparency = 0.4
circle.Thickness = 0.8
circle.Color = Aorinject.FOVColour
circle.Filled = false
Aorinject.FOVCircle = circle

function Aorinject.UpdateFOV()
    if not (circle) then
        return
    end
    circle.Visible = Aorinject.ShowFOV
    circle.Radius = Aorinject.FOV
    circle.Position = Vector2new(Mouse.X, Mouse.Y + GetGuiInset(GuiService).Y)
    circle.NumSides = Aorinject.FOVSides
    circle.Color = Aorinject.FOVColour
    return circle
end

function Aorinject.IsPartVisible(Part, PartDescendant)
    local Character = LocalPlayer.Character or CharacterAddedWait(CharacterAdded)
    local Origin = CurrentCamera.CFrame.Position
    local _, OnScreen = WorldToViewportPoint(CurrentCamera, Part.Position)
    if (OnScreen) then
        local raycastParams = RaycastParamsnew()
        raycastParams.FilterType = EnumRaycastFilterTypeBlacklist
        raycastParams.FilterDescendantsInstances = {Character, CurrentCamera}
        local Result = Raycast(Workspace, Origin, Part.Position - Origin, raycastParams)
        if (Result) then
            local PartHit = Result.Instance
            local Visible = (not PartHit or IsDescendantOf(PartHit, PartDescendant))
            return Visible
        end
    end
    return false
end

function Aorinject.Raycast(Origin, Destination, UnitMultiplier)
    if (typeof(Origin) == "Vector3" and typeof(Destination) == "Vector3") then
        if (not UnitMultiplier) then UnitMultiplier = 1 end
        local Direction = (Destination - Origin).Unit * UnitMultiplier
        local Result = Raycast(Workspace, Origin, Direction)
        if (Result) then
            local Normal = Result.Normal
            local Material = Result.Material
            return Direction, Normal, Material
        end
    end
    return nil
end

function Aorinject.Character(Player)
    return Player.Character
end

function Aorinject.CheckHealth(Player)
    local Character = Aorinject.Character(Player)
    local Humanoid = FindFirstChildWhichIsA(Character, "Humanoid")
    local Health = (Humanoid and Humanoid.Health or 0)
    return Health > 0
end

function Aorinject.Check()
    return (Aorinject.Enabled == true and Aorinject.Selected ~= LocalPlayer and Aorinject.SelectedPart ~= nil)
end
Aorinject.checkSilentAim = Aorinject.Check

function Aorinject.GetClosestTargetPartToCursor(Character)
    local TargetParts = Aorinject.TargetPart

    local ClosestPart = nil
    local ClosestPartPosition = nil
    local ClosestPartOnScreen = false
    local ClosestPartMagnitudeFromMouse = nil
    local ShortestDistance = 1/0
    local function CheckTargetPart(TargetPart)
        if (typeof(TargetPart) == "string") then
            TargetPart = FindFirstChild(Character, TargetPart)
        end
        if not (TargetPart) then
            return
        end
        local PartPos, onScreen = WorldToViewportPoint(CurrentCamera, TargetPart.Position)
        local GuiInset = GetGuiInset(GuiService)
        local Magnitude = (Vector2new(PartPos.X, PartPos.Y - GuiInset.Y) - Vector2new(Mouse.X, Mouse.Y)).Magnitude
        if (Magnitude < ShortestDistance) then
            ClosestPart = TargetPart
            ClosestPartPosition = PartPos
            ClosestPartOnScreen = onScreen
            ClosestPartMagnitudeFromMouse = Magnitude
            ShortestDistance = Magnitude
        end
    end
    if (typeof(TargetParts) == "string") then
        if (TargetParts == "All") then
            for _, v in ipairs(Character:GetChildren()) do
                if not (v:IsA("BasePart")) then
                    continue
                end
                CheckTargetPart(v)
            end
        else
            CheckTargetPart(TargetParts)
        end
    end
    if (typeof(TargetParts) == "table") then
        for _, TargetPartName in ipairs(TargetParts) do
            CheckTargetPart(TargetPartName)
        end
    end
    return ClosestPart, ClosestPartPosition, ClosestPartOnScreen, ClosestPartMagnitudeFromMouse
end

function Aorinject.GetClosestPlayerToCursor()
    local TargetPart = nil
    local ClosestPlayer = nil
    local ShortestDistance = 1/0
    for _, Player in ipairs(GetPlayers(Players)) do
        local Character = Aorinject.Character(Player)
        if Character then
            local TargetPartTemp, _, _, Magnitude = Aorinject.GetClosestTargetPartToCursor(Character)
            if (TargetPartTemp and Aorinject.CheckHealth(Player)) then
                if (circle.Radius > Magnitude and Magnitude < ShortestDistance) then
                    if (Aorinject.VisibleCheck and not Aorinject.IsPartVisible(TargetPartTemp, Character)) then continue end
                    ClosestPlayer = Player
                    ShortestDistance = Magnitude
                    TargetPart = TargetPartTemp
                end
            end
        end
    end

    Aorinject.Selected = ClosestPlayer
    Aorinject.SelectedPart = TargetPart
end

Heartbeat:Connect(function()
    Aorinject.UpdateFOV()
    Aorinject.GetClosestPlayerToCursor()
    
    --[[if Aorinject.Selected and Aorinject.Selected ~= game.Players.LocalPlayer and Aorinject.Selected.Character:WaitForChild("BodyEffects")["K.O"].Value == false and Aorinject.Selected.Character:FindFirstChild("GRABBING_CONSTRAINT") == false then
        Aorinject.SelectedPart.Velocity = Vector3.new(Aorinject.SelectedPart.Velocity.X, math.clamp(Aorinject.SelectedPart.Velocity.Y, 0, 50), Aorinject.SelectedPart.Velocity.Z)
        Aorinject.SelectedPart.AssemblyLinearVelocity = Vector3.new(Aorinject.SelectedPart.Velocity.X, math.clamp(Aorinject.SelectedPart.Velocity.Y, 0, 50), Aorinject.SelectedPart.Velocity.Z)
    end--]]

    if Locking and Enemy ~= nil and getgenv().CamShake then
        local CamVel = Enemy.HumanoidRootPart
        CamVel.Velocity = Vector3.new(CamVel.Velocity.X, CamVel.Velocity.Y, CamVel.Velocity.Z) + 
        Vector3.new(math.random(-CamShakeNumber, CamShakeNumber), math.random(-CamShakeNumber, CamShakeNumber), math.random(-CamShakeNumber, CamShakeNumber))
    end

    if getgenv().Humanize then
        local SilVel = Aorinject.Selected.Character.HumanoidRootPart
        SilVel.Velocity = Vector3.new(SilVel.Velocity.X, SilVel.Velocity.Y, SilVel.Velocity.Z) + 
        Vector3.new(math.random(-HumanizePower, HumanizePower), math.random(-HumanizePower, HumanizePower), math.random(-HumanizePower, HumanizePower)) * 0.1
    end
end)

local lplr = game.Players.LocalPlayer
local resolver
local AoriHRP
local AoriCamHRP

local function AddResolver()
    pcall(function()
        AoriHRP = Aorinject.Selected.Character.HumanoidRootPart
        AoriHRP.Velocity = Vector3.new(AoriHRP.Velocity.X, math.clamp(AoriHRP.Velocity.Y, 0, 50), AoriHRP.Velocity.Z)
        if Locking and antilockdetected then
            AoriCamHRP = Enemy.HumanoidRootPart
            AoriCamHRP.Velocity = Vector3.new(0, 0, 0)
            AoriCamHRP.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        end
    end)
end

resolver = Heartbeat:Connect(AddResolver)

--// executes resolver again on respawn

task.spawn(function()
	lplr.CharacterAdded:Connect(function()
		resolver:Disconnect()
		wait(5)
		resolver = Heartbeat:Connect(AddResolver)
	end)
end)



Move_Circle = RunService.RenderStepped:Connect(function()
    FOV_Circle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
end)

function InRadius()
    local Target = nil
    local Distance = 9e9
    local Camera = game:GetService("Workspace").CurrentCamera
    for _, v in pairs(Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character[Settings.Head] and v.Character[Settings.Humanoid] and v.Character.BodyEffects['K.O'].Value == false and
            v.Character[Settings.Humanoid].Health > 0 then
            local Enemy = v.Character
            local CastingFrom = CFrame.new(Camera.CFrame.Position, Enemy[Settings.Head].CFrame.Position) *
                                    CFrame.new(0, 0, -4)
            local RayCast = Ray.new(CastingFrom.Position, CastingFrom.LookVector * 9000)
            local World, ToSpace = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(RayCast,
                {LocalPlayer.Character[Settings.Head]});
            local RootWorld = (Enemy[Settings.Head].CFrame.Position - ToSpace).magnitude
            if RootWorld < 4 then
                local RootPartPosition, Visible = Camera:WorldToViewportPoint(Enemy[Settings.Head].Position)
                if Visible then
                    local Real_Magnitude = (Vector2.new(Mouse.X, Mouse.Y) -
                                               Vector2.new(RootPartPosition.X, RootPartPosition.Y)).Magnitude
                    if Real_Magnitude < Distance and Real_Magnitude < FOV_Circle.Radius then
                        Distance = Real_Magnitude
                        Target = Enemy
                    end
                end
            end
        end
    end
    return Target
end
function Aorinject.Check()
    if not (Aorinject.Enabled == true and Aorinject.Selected ~= LocalPlayer and Aorinject.SelectedPart ~= nil) then
        return false
    end
    local Character = Aorinject.Character(Aorinject.Selected)
    local KOd = Character:WaitForChild("BodyEffects")["K.O"].Value
    local Grabbed = Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
    if getgenv().GrabbedCheck then
        if Grabbed then
            return false
        end
    end
    if getgenv().KoCheck then
        if KOd then
            return false
        end
    end
    if getgenv().AntiDetect then
        if math.abs(Aorinject.Selected.Character.HumanoidRootPart.Velocity.X) > getgenv().AntiDetectNumber or Aorinject.Selected.Character.HumanoidRootPart.Velocity.Y > getgenv().AntiDetectNumber or math.abs(Aorinject.Selected.Character.HumanoidRootPart.Velocity.Z) > getgenv().AntiDetectNumber then
            return false
        end
    end
    return true
end
function Aimbot()
    pcall(function()
        if Locking then
            local Camera = game:GetService("Workspace").CurrentCamera
            local Predicted_Position = nil
            local GetPositionsFromVector3 = nil
            local Distance = 9e9
            if Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health > 0 and
                getgenv().SmoothnessValue and getgenv().PredictionState then
                Render_Lock = RunService.Stepped:Connect(function()
                    pcall(function()
                        if getgenv().TracerRadius then
                            local RootPartPosition = Camera:WorldToViewportPoint(Enemy[Settings.Head].Position)
                            local Real_Magnitude = (Vector2.new(Mouse.X, Mouse.Y) -
                                                       Vector2.new(RootPartPosition.X, RootPartPosition.Y)).Magnitude
                            if Real_Magnitude < Distance and Real_Magnitude < FOV_Circle.Radius then
                                if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and
                                    Enemy[Settings.Humanoid].Health > 0 and getgenv().CamUndergroundResolver then
                                    local hrp = Enemy.HumanoidRootPart
                                    hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
                                end
                                if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and
                                    Enemy[Settings.Humanoid].Health > 0 then
                                    Predicted_Position = Enemy[Settings.Head].Position +
                                                             (Enemy[Settings.Head].AssemblyLinearVelocity *
                                                                 getgenv().prediction + Settings.NeckOffSet)
                                    GetPositionsFromVector3 = Camera:WorldToScreenPoint(Predicted_Position)
                                    mousemoverel((GetPositionsFromVector3.X - Mouse.X) / getgenv().smoothness,
                                        (GetPositionsFromVector3.Y - Mouse.Y) / getgenv().smoothness)
                                elseif Locking == false then
                                    Enemy = nil
                                elseif Enemy == nil then
                                    Locking = false
                                end
                            end
                        elseif getgenv().TracerRadius == false then
                            if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health >
                                0 and getgenv().CamUndergroundResolver then
                                local hrp = Enemy.HumanoidRootPart
                                hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
                            end
                            if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health >
                                0 then
                                Predicted_Position = Enemy[Settings.Head].Position +
                                                         (Enemy[Settings.Head].AssemblyLinearVelocity *
                                                             getgenv().prediction + Settings.NeckOffSet)
                                GetPositionsFromVector3 = Camera:WorldToScreenPoint(Predicted_Position)
                                mousemoverel((GetPositionsFromVector3.X - Mouse.X) / getgenv().smoothness,
                                    (GetPositionsFromVector3.Y - Mouse.Y) / getgenv().smoothness)
                            elseif Locking == false then
                                Enemy = nil
                            elseif Enemy == nil then
                                Locking = false
                            end
                        end
                    end)
                end)
            elseif Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health > 0 and
                getgenv().SmoothnessValue == false and getgenv().PredictionState then
                Render_Lock = RunService.Stepped:Connect(function()
                    pcall(function()
                        if getgenv().TracerRadius then
                            local RootPartPosition = Camera:WorldToViewportPoint(Enemy[Settings.Head].Position)
                            local Real_Magnitude = (Vector2.new(Mouse.X, Mouse.Y) -
                                                       Vector2.new(RootPartPosition.X, RootPartPosition.Y)).Magnitude
                            if Real_Magnitude < Distance and Real_Magnitude < FOV_Circle.Radius then
                                if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and
                                    Enemy[Settings.Humanoid].Health > 0 and getgenv().CamUndergroundResolver then
                                    local hrp = Enemy.HumanoidRootPart
                                    hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
                                end
                                if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and
                                    Enemy[Settings.Humanoid].Health > 0 then
                                    Predicted_Position = Enemy[Settings.Head].Position +
                                                             (Enemy[Settings.Head].AssemblyLinearVelocity *
                                                                 getgenv().prediction + Settings.NeckOffSet)
                                    GetPositionsFromVector3 = Camera:WorldToScreenPoint(Predicted_Position)
                                    mousemoverel((GetPositionsFromVector3.X - Mouse.X) / 0.55,
                                        (GetPositionsFromVector3.Y - Mouse.Y) / 0.55)
                                elseif Locking == false then
                                    Enemy = nil
                                elseif Enemy == nil then
                                    Locking = false
                                end
                            end
                        elseif getgenv().TracerRadius == false then
                            if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health >
                                0 and getgenv().CamUndergroundResolver then
                                local hrp = Enemy.HumanoidRootPart
                                hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
                            end
                            if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health >
                                0 then
                                Predicted_Position = Enemy[Settings.Head].Position +
                                                         (Enemy[Settings.Head].AssemblyLinearVelocity *
                                                             getgenv().prediction + Settings.NeckOffSet)
                                GetPositionsFromVector3 = Camera:WorldToScreenPoint(Predicted_Position)
                                mousemoverel((GetPositionsFromVector3.X - Mouse.X) / 0.55,
                                    (GetPositionsFromVector3.Y - Mouse.Y) / 0.55)
                            elseif Locking == false then
                                Enemy = nil
                            elseif Enemy == nil then
                                Locking = false
                            end
                        end
                    end)
                end)
            elseif Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health > 0 and
                getgenv().SmoothnessValue and getgenv().PredictionState == false then
                Render_Lock = RunService.Stepped:Connect(function()
                    pcall(function()
                        if getgenv().TracerRadius then
                            local RootPartPosition = Camera:WorldToViewportPoint(Enemy[Settings.Head].Position)
                            local Real_Magnitude = (Vector2.new(Mouse.X, Mouse.Y) -
                                                       Vector2.new(RootPartPosition.X, RootPartPosition.Y)).Magnitude
                            if Real_Magnitude < Distance and Real_Magnitude < FOV_Circle.Radius then
                                if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and
                                    Enemy[Settings.Humanoid].Health > 0 and getgenv().CamUndergroundResolver then
                                    local hrp = Enemy.HumanoidRootPart
                                    hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
                                end
                                if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and
                                    Enemy[Settings.Humanoid].Health > 0 then
                                    Predicted_Position = Enemy[Settings.Head].Position
                                    GetPositionsFromVector3 = Camera:WorldToScreenPoint(Predicted_Position)
                                    mousemoverel((GetPositionsFromVector3.X - Mouse.X) / getgenv().smoothness,
                                        (GetPositionsFromVector3.Y - Mouse.Y) / getgenv().smoothness)
                                elseif Locking == false then
                                    Enemy = nil
                                elseif Enemy == nil then
                                    Locking = false
                                end
                            end
                        elseif getgenv().TracerRadius == false then
                            if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health >
                                0 and getgenv().CamUndergroundResolver then
                                local hrp = Enemy.HumanoidRootPart
                                hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
                            end
                            if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health >
                                0 then
                                Predicted_Position = Enemy[Settings.Head].Position
                                GetPositionsFromVector3 = Camera:WorldToScreenPoint(Predicted_Position)
                                mousemoverel((GetPositionsFromVector3.X - Mouse.X) / getgenv().smoothness,
                                    (GetPositionsFromVector3.Y - Mouse.Y) / getgenv().smoothness)
                            elseif Locking == false then
                                Enemy = nil
                            elseif Enemy == nil then
                                Locking = false
                            end
                        end
                    end)
                end)
            elseif Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health > 0 and
                getgenv().SmoothnessValue == false and getgenv().PredictionState == false then
                Render_Lock = RunService.Stepped:Connect(function()
                    pcall(function()
                        if getgenv().TracerRadius then
                            local RootPartPosition = Camera:WorldToViewportPoint(Enemy[Settings.Head].Position)
                            local Real_Magnitude = (Vector2.new(Mouse.X, Mouse.Y) -
                                                       Vector2.new(RootPartPosition.X, RootPartPosition.Y)).Magnitude
                            if Real_Magnitude < Distance and Real_Magnitude < FOV_Circle.Radius then
                                if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and
                                    Enemy[Settings.Humanoid].Health > 0 and getgenv().CamUndergroundResolver then
                                    local hrp = Enemy.HumanoidRootPart
                                    hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
                                end
                                if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and
                                    Enemy[Settings.Humanoid].Health > 0 then
                                    Predicted_Position = Enemy[Settings.Head].Position
                                    GetPositionsFromVector3 = Camera:WorldToScreenPoint(Predicted_Position)
                                    mousemoverel((GetPositionsFromVector3.X - Mouse.X) / 0.6,
                                        (GetPositionsFromVector3.Y - Mouse.Y) / 0.6)
                                elseif Locking == false then
                                    Enemy = nil
                                elseif Enemy == nil then
                                    Locking = false
                                end
                            end
                        elseif getgenv().TracerRadius == false then
                            if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health >
                                0 and getgenv().CamUndergroundResolver then
                                local hrp = Enemy.HumanoidRootPart
                                hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
                            end
                            if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] and Enemy[Settings.Humanoid].Health >
                                0 then
                                Predicted_Position = Enemy[Settings.Head].Position
                                GetPositionsFromVector3 = Camera:WorldToScreenPoint(Predicted_Position)
                                mousemoverel((GetPositionsFromVector3.X - Mouse.X) / 0.6,
                                    (GetPositionsFromVector3.Y - Mouse.Y) / 0.6)
                            elseif Locking == false then
                                Enemy = nil
                            elseif Enemy == nil then
                                Locking = false
                            end
                        end
                    end)
                end)
            end
        end
    end)
end

RunService.Stepped:Connect(function()
    if Locking and Enemy ~= nil and getgenv().CamAntiDetect then
        if math.abs(Enemy.HumanoidRootPart.Velocity.X) > 49 or Enemy.HumanoidRootPart.Velocity.Y > 49 or math.abs(Enemy.HumanoidRootPart.Velocity.Z) > 49 or math.abs(Aorinject.Selected.Character.HumanoidRootPart.Velocity.X) > getgenv().AntiDetectNumber or Aorinject.Selected.Character.HumanoidRootPart.Velocity.Y > getgenv().AntiDetectNumber or math.abs(Aorinject.Selected.Character.HumanoidRootPart.Velocity.Z) > getgenv().AntiDetectNumber then
            antilockdetected = true
            getgenv().prediction = 0
        else
            antilockdetected = false
            getgenv().prediction = tonumber(predictionvalue)
        end
    end
    if getgenv().UnlockWhenTargetDies then
        if Locking and Enemy ~= nil and Enemy[Settings.Humanoid] then
            if Enemy.BodyEffects['K.O'].Value == true and Enemy[Settings.Humanoid] then
                Locking = false
                Render_Lock:Disconnect()
            end
        end
    end
    if getgenv().UnlockWhenPlayerDies then
        if game.Players.LocalPlayer.Character.BodyEffects['K.O'].Value == true or
            game.Players.LocalPlayer.Character.Humanoid.Health <= 0 then
            Locking = false
            Render_Lock:Disconnect()
        end
    end
end)

rconsolename("aorinject")
function aorimain()
aorinjectbase([[
                                                    .                                                    s    
                                                   @88>                   ..                            :8    
                               u.      .u    .     %8P      u.    u.     888>                          .88    
                  u      ...ue888b   .d88B :@8c     .     x@88k u@88c.   "8P        .u          .     :888ooo 
               us888u.   888R Y888r ="8888f8888r  .@88u  ^"8888""8888"    .      ud8888.   .udR88N  -*8888888 
            .@88 "8888"  888R I888>   4888>'88"  ''888E`   8888  888R   u888u. :888'8888. <888'888k   8888    
            9888  9888   888R I888>   4888> '      888E    8888  888R  `'888E  d888 '88%" 9888 'Y"    8888    
            9888  9888   888R I888>   4888>        888E    8888  888R    888E  8888.+"    9888        8888    
            9888  9888  u8888cJ888   .d888L .+     888E    8888  888R    888E  8888L      9888       .8888Lu= 
            9888  9888   "*888*P"    ^"8888*"      888&   "*88*" 8888"   888E  '8888c. .+ ?8888u../  ^%888*   
            "888*""888"    'Y"          "Y"        R888"    ""   'Y"     888E   "88888%    "8888P'     'Y"    
             ^Y"   ^Y'                              ""                   888E     "YP'       "P'              
                                                                         888E                                 
                                                                         888P                                 
                                                                       .J88"                            

                  Made by delusional#7743 & aori#0001 / discord.gg/aorinject | Edited by red.#7074

                  BELLA IS A LOCKER !! 😰😰😱 PREY IS UNLEGIT !! 😨🤯😧 TREY LIKES GUYS !!

                                [1] Load Aorinject []] ..aorinjectstatus ..[[]
                                [2] Camlock Settings
                                [3] Silent-Aim Settings
                                [4] ESP Keybind []] ..espkeybindvalue ..[[]

                                IDK WHATS CAUSING FPS DROPSDAFKJASFHLLAj
]])
aori = rconsoleinput("")
aoriresponse()
end

function aoricammiscs()
aorinjectbase([[
                                                    .                                                    s    
                                                   @88>                   ..                            :8    
                               u.      .u    .     %8P      u.    u.     888>                          .88    
                  u      ...ue888b   .d88B :@8c     .     x@88k u@88c.   "8P        .u          .     :888ooo 
               us888u.   888R Y888r ="8888f8888r  .@88u  ^"8888""8888"    .      ud8888.   .udR88N  -*8888888 
            .@88 "8888"  888R I888>   4888>'88"  ''888E`   8888  888R   u888u. :888'8888. <888'888k   8888    
            9888  9888   888R I888>   4888> '      888E    8888  888R  `'888E  d888 '88%" 9888 'Y"    8888    
            9888  9888   888R I888>   4888>        888E    8888  888R    888E  8888.+"    9888        8888    
            9888  9888  u8888cJ888   .d888L .+     888E    8888  888R    888E  8888L      9888       .8888Lu= 
            9888  9888   "*888*P"    ^"8888*"      888&   "*88*" 8888"   888E  '8888c. .+ ?8888u../  ^%888*   
            "888*""888"    'Y"          "Y"        R888"    ""   'Y"     888E   "88888%    "8888P'     'Y"    
             ^Y"   ^Y'                              ""                   888E     "YP'       "P'              
                                                                         888E                                 
                                            [Camlock Settings]           888P                                 
                                                                       .J88"                                                                 

                                        [0] Change FOV Radius []] ..fovvalue ..[[]
                                        [1] Show FOV Circle []] ..fovcirclestatus ..[[]
                                        [2] Notifications []] ..notifstatus ..[[]
                                        [3] Smoothness []] ..smoothnessstatus ..[[]
                                        [4] Smoothness Value []] ..smoothnessvalue ..[[]
                                        [5] Auto Desync Resolver []] ..camantidetectstatus ..[[]
                                        [6] Unlock When Target Dies []] ..unlockwhendeadstatus ..[[]
                                        [7] Prediction Value []] ..predictionvalue ..[[]
                                        [8] Keybind []] ..keybindvalue ..[[]

                                            [1v1 Methods]
                                        [9] Trace Only if Target is in Radius []] ..tracewhentargetradiusstatus ..[[]
                                        [10] Use Shake (WIP) []] ..camshakestatus ..[[]
                                        [11] Shake Power []] ..camshakevalue ..[[]

                                        [X] Go back to main menu
]])
aoricammisc = rconsoleinput("")
aoricammiscresponse()
end

function aorisilmiscs()
aorinjectbase([[
                                                    .                                                    s    
                                                   @88>                   ..                            :8    
                               u.      .u    .     %8P      u.    u.     888>                          .88    
                  u      ...ue888b   .d88B :@8c     .     x@88k u@88c.   "8P        .u          .     :888ooo 
               us888u.   888R Y888r ="8888f8888r  .@88u  ^"8888""8888"    .      ud8888.   .udR88N  -*8888888 
            .@88 "8888"  888R I888>   4888>'88"  ''888E`   8888  888R   u888u. :888'8888. <888'888k   8888    
            9888  9888   888R I888>   4888> '      888E    8888  888R  `'888E  d888 '88%" 9888 'Y"    8888    
            9888  9888   888R I888>   4888>        888E    8888  888R    888E  8888.+"    9888        8888    
            9888  9888  u8888cJ888   .d888L .+     888E    8888  888R    888E  8888L      9888       .8888Lu= 
            9888  9888   "*888*P"    ^"8888*"      888&   "*88*" 8888"   888E  '8888c. .+ ?8888u../  ^%888*   
            "888*""888"    'Y"          "Y"        R888"    ""   'Y"     888E   "88888%    "8888P'     'Y"    
             ^Y"   ^Y'                              ""                   888E     "YP'       "P'              
                                                                         888E                                 
                                            [Silent-Aim Settings]        888P                                 
                                                                       .J88"                            

                                            No Floor Shots []] ..silresolverstatus ..[[]                               
                                        [0] Enable / Disable Silent-Aim []] ..silentaimstatus ..[[]
                                        [1] Prediction Value []] ..silpredictionvalue ..[[]
                                        [2] Grabbed Check []] ..silgrabbedvalue ..[[]
                                        [3] K.O Check []] ..silkodcheckstatus ..[[]
                                        [4] Change FOV Radius []] ..silentfovvalue ..[[]
                                        [5] Show FOV Circle []] ..silentfovcirclestatus ..[[]
                                        [6] Silent Aim Toggle Key []] ..silentkeybindvalue ..[[]

                                            [Legit Methods]
                                        [7] Unlock when Anti Lock is Detected []] ..antidetectstatus ..[[]
                                        [8] Anti Lock Detection Amount []] ..antidetectvalue ..[[]
                                        [9] Humanize Shots []] ..humanizestatus ..[[]
                                        [10] Humanize Power []] ..humanizevalue ..[[]

                                        [X] Go back to main menu
]])
aorisilmisc = rconsoleinput("")
aorisilmiscresponse()
end

function aoriresponse()
    if aori == "1" and getgenv().loaded == false then
        Mouse.KeyDown:Connect(function(KeyPressed)
            if KeyPressed == string.lower(getgenv().silentkeybind) then
                pcall(function()
                    if getgenv().AorinjectSettings.SilentAim == true then
                        getgenv().AorinjectSettings.SilentAim = false
                        silentaimstatus = "Disabled"
                        game.StarterGui:SetCore("SendNotification", {
                            Title = "Silent Aim",
                            Text = "OFF",
                            Duration = 1
                        })
                    elseif getgenv().AorinjectSettings.SilentAim == false then
                        getgenv().AorinjectSettings.SilentAim = true
                        silentaimstatus = "Enabled"
                        game.StarterGui:SetCore("SendNotification", {
                            Title = "Silent Aim",
                            Text = "ON",
                            Duration = 1
                        })
                    end
                end)
            end
            if KeyPressed == string.lower(getgenv().keybind) then
                pcall(function()
                    if Locking == false then
                        Locking = true
                        Aimbot()
                        Enemy = InRadius()
                        if getgenv().Notifications then
                            game.StarterGui:SetCore("SendNotification", {
                                Title = "aorinject",
                                Text = "Target:  " .. tostring(Enemy.Humanoid.DisplayName .. ".")
                            })
                        end
                        if Enemy == nil then
                            Locking = false
                        end
                    elseif Locking == true then
                        if getgenv().Notifications then
                            game.StarterGui:SetCore("SendNotification", {
                                Title = "aorinject",
                                Text = "Unlocked."
                            })
                        end
                        Locking = false
                        Render_Lock:Disconnect()
                    end
                end)
            end
        end)
        AorinjectSettings.SilentAim = true
        getgenv().loaded = true
        aorinjectstatus = "Loaded"
        rconsoleclear()
        aorimain()
    elseif aori == "1" and getgenv().loaded == true then
        rconsoleprint([[Already Loaded
]])
        aori = rconsoleinput("")
        aoriresponse()
    elseif aori == "2" then
        rconsoleclear()
        aoricammiscs()
    elseif aori == "3" then
        rconsoleclear()
        aorisilmiscs()
    elseif aori == "4" then
        rconsoleprint("Keybind: ")
        espkeybindvalue = rconsoleinput("")
        getgenv().espToggleKey = espkeybindvalue
        rconsoleclear()
        aorimain()
    else
        rconsoleprint([[Unknown Command
]])
        aori = rconsoleinput("")
        aoriresponse()
    end
end

function aoricammiscresponse()
    if aoricammisc == "2" then
        if getgenv().Notifications == true then
            getgenv().Notifications = false
            notifstatus = "false"
        elseif getgenv().Notifications == false then
            getgenv().Notifications = true
            notifstatus = "true"
        end
        rconsoleclear()
        aoricammiscs()
    elseif aoricammisc == "3" then
        if getgenv().SmoothnessValue == true then
            getgenv().SmoothnessValue = false
            smoothnessstatus = "false"
        elseif getgenv().SmoothnessValue == false then
            getgenv().SmoothnessValue = true
            smoothnessstatus = "true"
        end
        rconsoleclear()
        aoricammiscs()
    elseif aoricammisc == "4" then
        rconsoleprint("Smoothness: ")
        smoothnessvalue = rconsoleinput("")
        if not tonumber(smoothnessvalue) then
            rconsoleprint([[Invalid Number
]])
            aoricammisc = rconsoleinput("")
            aoricammiscresponse()
        else
        getgenv().smoothness = tonumber(smoothnessvalue)
        rconsoleclear()
        aoricammiscs()
        end
    elseif aoricammisc == "5" then
        if getgenv().CamAntiDetect == true then
            getgenv().CamAntiDetect  = false
            camantidetectstatus = "false"
        elseif getgenv().CamAntiDetect  == false then
            getgenv().CamAntiDetect  = true
            camantidetectstatus = "true"
        end
        rconsoleclear()
        aoricammiscs()
    elseif aoricammisc == "7" then
        rconsoleprint("Prediction: ")
        predictionvalue = rconsoleinput("")
        if not tonumber(predictionvalue) then
            rconsoleprint([[Invalid Number
]])
            aoricammisc = rconsoleinput("")
            aoricammiscresponse()
        else
        getgenv().prediction = tonumber(predictionvalue)
        rconsoleclear()
        aoricammiscs()
        end
    elseif aoricammisc == "6" then
        if getgenv().UnlockWhenTargetDies == true then
            getgenv().UnlockWhenTargetDies = false
            unlockwhendeadstatus = "false"
        elseif getgenv().UnlockWhenTargetDies == false then
            getgenv().UnlockWhenTargetDies = true
            unlockwhendeadstatus = "true"
        end
        rconsoleclear()
        aoricammiscs()
    elseif aoricammisc == "9" then
        if getgenv().TracerRadius == true then
            getgenv().TracerRadius = false
            tracewhentargetradiusstatus = "false"
        elseif getgenv().TracerRadius == false then
            getgenv().TracerRadius = true
            tracewhentargetradiusstatus = "true"
        end
        rconsoleclear()
        aoricammiscs()
    elseif aoricammisc == "1" then
        if FOV_Circle.Visible == true then
            FOV_Circle.Visible = false
            fovcirclestatus = "false"
        elseif FOV_Circle.Visible == false then
            FOV_Circle.Visible = true
            fovcirclestatus = "true"
        end
        rconsoleclear()
        aoricammiscs()
    elseif aoricammisc == "10" then
        if getgenv().CamShake == true then
            getgenv().CamShake = false
            camshakestatus = "false"
        elseif getgenv().CamShake == false then
            getgenv().CamShake = true
            camshakestatus = "true"
        end
        rconsoleclear()
        aoricammiscs()
    elseif aoricammisc == "11" then
        rconsoleprint("Power: ")
        camshakevalue = rconsoleinput("")
        if not tonumber(camshakevalue) then
            rconsoleprint([[Invalid Number
]])
            aoricammisc = rconsoleinput("")
            aoricammiscresponse()
        else
        getgenv().CamShakeNumber = camshakevalue
        rconsoleclear()
        aoricammiscs()
        end
    elseif aoricammisc == "8" then
        rconsoleprint("Keybind: ")
        keybindvalue = rconsoleinput("")
        if not tostring(keybindvalue) then
            rconsoleprint([[Invalid Key
]])
            aoricammisc = rconsoleinput("")
            aoricammiscresponse()
        else
        getgenv().keybind = keybindvalue
        rconsoleclear()
        aoricammiscs()
        end
    elseif aoricammisc == "0" then
        rconsoleprint("FOV: ")
        fovvalue = rconsoleinput("")
        if not tonumber(fovvalue) then
            rconsoleprint([[Invalid Number
]])
            aoricammisc = rconsoleinput("")
            aoricammiscresponse()
        else
        FOV_Circle.Radius = tonumber(fovvalue)
        rconsoleclear()
        aoricammiscs()
        end
    elseif aoricammisc == "X" or aoricammisc == "x" then
        rconsoleclear()
        aorimain()
    else
        rconsoleprint([[Unknown Command
]])
        aoricammisc = rconsoleinput("")
        aoricammiscresponse()
    end
end

function aorisilmiscresponse()
    if aorisilmisc == "0" then
        if getgenv().AorinjectSettings.SilentAim == true then
            getgenv().AorinjectSettings.SilentAim = false
            silentaimstatus = "Disabled"
        elseif getgenv().AorinjectSettings.SilentAim == false then
            getgenv().AorinjectSettings.SilentAim = true
            silentaimstatus = "Enabled"
        end
        rconsoleclear()
        aorisilmiscs()
    elseif aorisilmisc == "1" then
        rconsoleprint("Prediction: ")
        silpredictionvalue = rconsoleinput("")
        if not tonumber(silpredictionvalue) then
            rconsoleprint([[Invalid Number
]])
            aorisilmisc = rconsoleinput("")
            aorisilmiscresponse()
        else
        getgenv().AorinjectSettings.Prediction = tonumber(silpredictionvalue)
        rconsoleclear()
        aorisilmiscs()
        end
    elseif aorisilmisc == "2" then
        if getgenv().GrabbedCheck == true then
            getgenv().GrabbedCheck = false
            silgrabbedvalue = "false"
        elseif getgenv().GrabbedCheck == false then
            getgenv().GrabbedCheck = true
            silgrabbedvalue = "true"
        end
        rconsoleclear()
        aorisilmiscs()
    elseif aorisilmisc == "3" then
        if getgenv().KoCheck == true then
            getgenv().KoCheck = false
            silkodcheckstatus = "false"
        elseif getgenv().KoCheck == false then
            getgenv().KoCheck = true
            silkodcheckstatus = "true"
        end
        rconsoleclear()
        aorisilmiscs()
    elseif aorisilmisc == "4" then
        rconsoleprint("FOV: ")
        silentfovvalue = rconsoleinput("")
        if not tonumber(silentfovvalue) then
            rconsoleprint([[Invalid Number
]])
            aorisilmisc = rconsoleinput("")
            aorisilmiscresponse()
        else
        getgenv().Aorinject.FOV = tonumber(silentfovvalue)
        rconsoleclear()
        aorisilmiscs()
        end
    elseif aorisilmisc == "5" then
        if getgenv().Aorinject.ShowFOV == true then
            getgenv().Aorinject.ShowFOV = false
            silentfovcirclestatus = "false"
        elseif getgenv().Aorinject.ShowFOV == false then
            getgenv().Aorinject.ShowFOV = true
            silentfovcirclestatus = "true"
        end
        rconsoleclear()
        aorisilmiscs()()
    elseif aorisilmisc == "6" then
        rconsoleprint("Keybind: ")
        silentkeybindvalue = rconsoleinput("")
        if not tostring(silentkeybindvalue) then
            rconsoleprint([[Invalid Number
]])
            aorisilmisc = rconsoleinput("")
            aorisilmiscresponse()
        else
        getgenv().silentkeybind = silentkeybindvalue
        rconsoleclear()
        aorisilmiscs()
        end
    elseif aorisilmisc == "7" then
        if getgenv().AntiDetect == true then
            getgenv().AntiDetect = false
            antidetectstatus = "false"
        elseif getgenv().AntiDetect == false then
            getgenv().AntiDetect = true
            antidetectstatus = "true"
        end
        rconsoleclear()
        aorisilmiscs()
    elseif aorisilmisc == "8" then
        rconsoleprint("Velocity Amount: ")
        antidetectvalue = rconsoleinput("")
        if not tonumber(antidetectvalue) then
            rconsoleprint([[Invalid Number
]])
            aorisilmisc = rconsoleinput("")
            aorisilmiscresponse()
        else
        getgenv().AntiDetectNumber = tonumber(antidetectvalue)
        rconsoleclear()
        aorisilmiscs()
        end
    elseif aorisilmisc == "9" then
        if getgenv().Humanize == true then
            getgenv().Humanize = false
            humanizestatus = "false"
        elseif getgenv().Humanize == false then
            getgenv().Humanize = true
            humanizestatus = "true"
        end
        rconsoleclear()
        aorisilmiscs()
    elseif aorisilmisc == "10" then
        rconsoleprint("Humanize Power: ")
        humanizevalue = rconsoleinput("")
        if not tonumber(humanizevalue) then
            rconsoleprint([[Invalid Number
]])
            aorisilmisc = rconsoleinput("")
            aorisilmiscresponse()
        else
        getgenv().HumanizePower = tonumber(humanizevalue)
        rconsoleclear()
        aorisilmiscs()
        end
    elseif aorisilmisc == "X" or aorisilmisc == "x" then
        rconsoleclear()
        aorimain()
    else
        rconsoleprint([[Unknown Command
]])
        aorisilmisc = rconsoleinput("")
        aorisilmiscresponse()
    end
end

--// esp section
local taffy = false
local noob = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local lol = LocalPlayer:GetMouse()

lol.KeyDown:Connect(function(aaa)
	if aaa == string.lower(espToggleKey) then
		pcall(function()
			if taffy == false then
				taffy = true
				getgenv().taffyesp.box.enabled = true
				getgenv().taffyesp.name.enabled = true
			elseif taffy == true then
				taffy = false
				getgenv().taffyesp.box.enabled = false
				getgenv().taffyesp.name.enabled = false
			end
		end)
	end
end)


local lplr = game.Players.LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera
local CurrentCamera = workspace.CurrentCamera
local worldToViewportPoint = CurrentCamera.worldToViewportPoint
local mouse = game.Players.LocalPlayer:GetMouse()
local UserInput = game:GetService("UserInputService")

getgenv().taffyesp = {
    box = {
        enabled1 = true,
        enabled = false,
        outline = false,
        healthbar = false,
        color1 = Color3.fromRGB(0, 0, 0),
        color2 = Color3.fromRGB(255, 255, 255),
        healthbarcolor = Color3.fromRGB(0, 255, 0)
    },
    tracer = {
        enabled = false,
        unlocktracers = false,
        color = Color3.fromRGB(255, 255, 255)
    },
    name = {
        enabled = false,
        outline = false,
        size = 13,
        font = 2,
        color = Color3.fromRGB(255, 255, 255)
    },
    misc = {
        teamcheck = false,
        useteamcolors = false,
        visibleonly = true
    },
    Toolsshow = {
        enable = false,
        outline = false,
        size = 8,
        font = 3,
        color = Color3.fromRGB(147, 39, 161)
    }
}

function esp(v)
    -- box --
    local BLOCKOUTLINE = Drawing.new("Square")
    BLOCKOUTLINE.Visible = false
    BLOCKOUTLINE.Color = Color3.new(0,0,0)
    BLOCKOUTLINE.Thickness = 1
    BLOCKOUTLINE.Transparency = 1
    BLOCKOUTLINE.Filled = false

    local BOXPLAYER = Drawing.new("Square")
    BOXPLAYER.Visible = false
    BOXPLAYER.Color = taffyesp.box.color1
    BOXPLAYER.Thickness = 1
    BOXPLAYER.Transparency = 1
    BOXPLAYER.Filled = false

    local HealthBarOUTLINE = Drawing.new("Square")
    HealthBarOUTLINE.Thickness = 1
    HealthBarOUTLINE.Filled = false
    HealthBarOUTLINE.Color = Color3.new(0,0,0)
    HealthBarOUTLINE.Transparency = 1
    HealthBarOUTLINE.Visible = false

    local HealthBarITSELF = Drawing.new("Square")
    HealthBarITSELF.Thickness = 1
    HealthBarITSELF.Filled = false
    HealthBarITSELF.Transparency = 1
    HealthBarITSELF.Visible = false
    
    local Tracer = Drawing.new("Line")
    Tracer.Visible = false
    Tracer.Color = Color3.new(1,1,1)
    Tracer.Thickness = 1
    Tracer.Transparency = 1

    local Name = Drawing.new("Text")
    Name.Transparency = 1
    Name.Visible = false
    Name.Color = taffyesp.name.color
    Name.Size = 16
    Name.Center = true
    Name.Outline = false
    Name.Font = 2
    Name.Text = "name [100/100]"

    local toolshow = Drawing.new("Text")
    toolshow.Transparency = 1
    toolshow.Visible = false
    toolshow.Color = getgenv().taffyesp.Toolsshow.color
    toolshow.Size = 16
    toolshow.Center = true
    toolshow.Outline = false
    toolshow.Font = 2
    toolshow.Text = ""
game:GetService("RunService").RenderStepped:Connect(function()
        if v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v ~= lplr and v.Character.Humanoid.Health  > 0 and (not taffyesp.misc.teamcheck or v.TeamColor == lplr.TeamColor) then
            local Vector, onScreen = camera:worldToViewportPoint(v.Character.HumanoidRootPart.Position)
            local Distance = (CurrentCamera.CFrame.p - v.Character.HumanoidRootPart.Position).Magnitude
            local RootPart = v.Character.HumanoidRootPart
            local Head = v.Character.Head
            local RootPosition, RootVis = worldToViewportPoint(CurrentCamera, RootPart.Position)
            local HeadPosition = worldToViewportPoint(CurrentCamera, Head.Position + Vector3.new(0,0.5,0))
            local LegPosition = worldToViewportPoint(CurrentCamera, RootPart.Position - Vector3.new(0,3,0))
            if (not taffyesp.misc.visibleonly or onScreen) then
                if taffyesp.box.enabled1 then
                    BLOCKOUTLINE.Size = Vector2.new(2500 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
                    BLOCKOUTLINE.Position = Vector2.new(RootPosition.X - BLOCKOUTLINE.Size.X / 2, RootPosition.Y - BLOCKOUTLINE.Size.Y / 2)
                    BLOCKOUTLINE.Visible = taffyesp.box.outline
                    BLOCKOUTLINE.Color = taffyesp.box.color2
    
                    BOXPLAYER.Size = Vector2.new(2500 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
                    BOXPLAYER.Position = Vector2.new(RootPosition.X - BOXPLAYER.Size.X / 2, RootPosition.Y - BOXPLAYER.Size.Y / 2)
                    BOXPLAYER.Visible = taffyesp.box.enabled
                    if not taffyesp.misc.useteamcolors then
                        local color = v.TeamColor
                        BOXPLAYER.Color = taffyesp.box.color1
                    else
                        BOXPLAYER.Color = taffyesp.box.color1
                    end
                        
                    HealthBarOUTLINE.Size = Vector2.new(2, HeadPosition.Y - LegPosition.Y)
                    HealthBarOUTLINE.Position = HealthBarOUTLINE.Position - Vector2.new(6,0)
                    HealthBarOUTLINE.Visible = taffyesp.box.outline
    
                    HealthBarITSELF.Size = Vector2.new(2, (HeadPosition.Y - LegPosition.Y) / (v.Character.Humanoid.MaxHealth / math.clamp(v.Character.Humanoid.Health, 0,v.Character.Humanoid.MaxHealth)))
                    HealthBarITSELF.Position = Vector2.new(BOXPLAYER.Position.X - 5, BOXPLAYER.Position.Y + (1 / HealthBarITSELF.Size.Y))
                    HealthBarITSELF.Color = taffyesp.box.healthbarcolor
                    HealthBarITSELF.Visible = taffyesp.box.healthbar
                    
                    
                    
                    
                else
                    BLOCKOUTLINE.Visible = false
                    BOXPLAYER.Visible = false
                    HealthBarOUTLINE.Visible = false
                    HealthBarITSELF.Visible = false
                end
                if taffyesp.tracer.enabled then
                    if taffyesp.tracer.unlocktracers then
                        Tracer.From = Vector2.new(mouse.X, mouse.Y + 36)
                    else
                        Tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 1)
                    end
                    Tracer.To = Vector2.new(Vector.X, Vector.Y)
                    Tracer.Visible = taffyesp.tracer.enabled
                    if not taffyesp.misc.useteamcolors then
                        local color = v.TeamColor
                        Tracer.Color = taffyesp.tracer.color
                    else
                        Tracer.Color = taffyesp.tracer.color
                    end
                else
                    Tracer.Visible = false
                end

                if taffyesp.Toolsshow.enable then
                      local Equipped = v.Character:FindFirstChildOfClass("Tool") and v.Character:FindFirstChildOfClass("Tool").Name or ""
                    toolshow.Text = Equipped
                    toolshow.Position = Vector2.new(workspace.Camera:WorldToViewportPoint(v.Character.Head.Position).X, workspace.Camera:WorldToViewportPoint(v.Character.Head.Position).Y + 30)
                    toolshow.Color = getgenv().taffyesp.Toolsshow.color
                    toolshow.Font = 3
                    Name.Size = taffyesp.Toolsshow.size
                    toolshow.Visible = true
                    else
                        toolshow.Visible = false
                end


                if taffyesp.name.enabled then
                    Name.Text = tostring(v.Character.Humanoid.DisplayName).. " [" .. tostring(math.floor(v.Character.Humanoid.Health + 0.5)) .. "]"
                    Name.Position = Vector2.new(workspace.Camera:WorldToViewportPoint(v.Character.Head.Position).X, workspace.Camera:WorldToViewportPoint(v.Character.Head.Position).Y - 30)
                    Name.Visible = true
                    Name.Size = taffyesp.name.size
                    if not taffyesp.misc.useteamcolors then
                        local color = v.TeamColor
                        Name.Color = taffyesp.name.color
                    else
                        Name.Color = taffyesp.name.color
                    end
                    Name.Outline = taffyesp.name.outline
                else
                    Name.Visible = false
                end
            else
                BLOCKOUTLINE.Visible = false
                BOXPLAYER.Visible = false
                toolshow.Visible=false
                HealthBarOUTLINE.Visible = false
                HealthBarITSELF.Visible = false
                Tracer.Visible = false
                Name.Visible = false
            end
        else
            toolshow.Visible=false
            BLOCKOUTLINE.Visible = false
            BOXPLAYER.Visible = false
            HealthBarOUTLINE.Visible = false
            HealthBarITSELF.Visible = false
            Tracer.Visible = false
            Name.Visible = false
        end
    end)
end

for i,v in pairs(game.Players:GetChildren()) do
    esp(v)
end

game.Players.PlayerAdded:Connect(function(v)
    esp(v)
end)

task.spawn(function ()
    while true do
        wait()
        if getgenv().taffyesp.box.healthbar or getgenv().taffyesp.box.enabled then
            getgenv().taffyesp.box.outline = true
        elseif getgenv().taffyesp.box.healthbar == false or getgenv().taffyesp.box.enabled == false then
            getgenv().taffyesp.box.outline = false
        end
        if getgenv().taffyesp.box.healthbar == true and getgenv().taffyesp.box.enabled == false then
            getgenv().taffyesp.box.outline = false
        end
    end
end)



local __index
__index = hookmetamethod(game, "__index", function(t, k)
    if (t:IsA("Mouse") and (k == "Hit" or k == "Target") and Aorinject.Check()) then
        local SelectedPart = Aorinject.SelectedPart
        if (getgenv().AorinjectSettings.SilentAim and (k == "Hit" or k == "Target")) then
            local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * getgenv().AorinjectSettings.Prediction)
            return (k == "Hit" and Hit or SelectedPart)
        end
    end
    return __index(t, k)
end)

rconsoleclear()
aorimain()
